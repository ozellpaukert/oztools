"""Command line utilities for kaggle competitions"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/api/00_kgl.ipynb.

# %% auto 0
__all__ = ['pad', 'disp_comp', 'attrkey', 'str_enumerate', 'cz', 'kgl_list', 'kgl_hello']

# %% ../nbs/api/00_kgl.ipynb 3
from fastcore.all import *
from fastkaggle import *
import itertools as it

# %% ../nbs/api/00_kgl.ipynb 6
def pad(s, pad_to):
    return s + " " * max(0, (pad_to - len(s)))

# %% ../nbs/api/00_kgl.ipynb 8
def disp_comp(comp):
    slug = comp.url.split("/")[-1]
    return f"{pad(slug[:40],40)} {comp.title[:40]}"

# %% ../nbs/api/00_kgl.ipynb 9
def attrkey(attr):
    return lambda x: getattr(x, attr)

# %% ../nbs/api/00_kgl.ipynb 12
def str_enumerate(lst, start=0):
    return map(lambda x: f"  {pad(str(x[0]),2)}  {x[1]}", enumerate(lst, start))

# %% ../nbs/api/00_kgl.ipynb 13
def cz(*funcs):
    "Compose functions together"
    def fn(x):
        for fn in funcs:
            x = fn(x)
        return x
    return fn

# %% ../nbs/api/00_kgl.ipynb 16
@call_parse
def kgl_list():
    "List kaggle competitions"

    api = import_kaggle()
    comps = api.competitions_list()
    
    joinedkey = attrkey("userHasEntered")
    comps.sort(key=joinedkey)
    active, entered = (list(y) for x,y in it.groupby(comps, joinedkey))

    return '\n'.join(("Joined:", *str_enumerate(map(disp_comp, entered), 1),
                      "Active:", *str_enumerate(map(disp_comp, active), 1+len(entered))))

# %% ../nbs/api/00_kgl.ipynb 18
@call_parse
def kgl_hello():
    return "Hello, world"
